Q1) Intro 
int led = 12;
void setup() {
  pinMode(led, OUTPUT);
}
void loop() {
  digitalWrite(led, HIGH);
  delay(200); // Wait for 1000 millisecond(s)
  digitalWrite(led, LOW);
  delay(200); // Wait for 1000 millisecond(s)
}


 Q2 ) LED (LIGHT SNEOR)

const int LEDPin = 13;

const int LDRPin = AO;

void setup() {

Serial.begin(9600);

pinMode(LEDPin, OUTPUT);

pinMode(LDRPin, INPUT);

}
void loop(){

int LDRStatus = analogRead(LDRPin);

if(LDRStatus <=500){

digitalWrite(LEDPin, HIGH);

Serial.print("Current Light Intensity Value is - ");

Serial.printIn(LDRStatus);

)else{

digitalWrite(LEDPin, LOW);

Serial.print("Current Light Intensity Value is -");

Serial.printIn(LDRStatus);
}
}

Q3) Temperature sensor 
#include "LiquidCrystal.h"

LiquidCrystal lcd(8, 7, 6, 5, 4, 3);
int sensorPin = 0;

void setup() {
  Serial.begin(9600);
  lcd.begin(16, 2);
}

void loop() {
  int reading = analogRead(sensorPin);
  float voltage = reading * 4.88;
  voltage /= 1024.0;
  
  float temperatureC = (voltage - 0.5) * 100;
  Serial.println("Degrees C");
  Serial.println(temperatureC);
  lcd.setCursor(0, 0);
  lcd.print("Temperature Value");
  lcd.setCursor(0, 1);
  lcd.print(temperatureC);
  lcd.print(" Degrees C");
  
  delay(100);
}
Q4) Servo motor 
#include <Servo.h>

int push = 0;
Servo servo_9;

void setup() {
  pinMode(4, INPUT);
  Serial.begin(9600);
  servo_9.attach(9, 500, 2500);
}

void loop() {
  push = digitalRead(4);
  Serial.println(push);
  
  if (push == 1) {
    servo_9.write(180);
  } else {
    servo_9.write(0);
  }
  delay(10); 
}
Q5) ultrasonic sensor 
int trigger_pin = 2;
int echo_pin = 3;
int buzzer_pin = 10;
long time;
int distance;

void setup() {
  Serial.begin(9600);
  pinMode(trigger_pin, OUTPUT);
  pinMode(echo_pin, INPUT);
  pinMode(buzzer_pin, OUTPUT);
}

void loop() {
  digitalWrite(trigger_pin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigger_pin, LOW);

  time = pulseIn(echo_pin, HIGH);
  distance = time * 0.034 / 2;

  if (distance <= 10) {
    Serial.println(" Door Open ");
    Serial.print(" Distance ");
    Serial.println(distance);
    digitalWrite(buzzer_pin, HIGH);
    delay(500);
  } else {
    Serial.println(" Door Closed ");
    Serial.print(" Distance ");
    Serial.println(distance);
    digitalWrite(buzzer_pin, LOW);
    delay(500);
  }
}
Q6) traffic lights 
int animationSpeed = 0;

void setup() {
  pinMode(13, OUTPUT);
  pinMode(12, OUTPUT);
  pinMode(11, OUTPUT);
}

void loop() {
  animationSpeed = 400;
  
  digitalWrite(13, HIGH);
  delay(animationSpeed);
  digitalWrite(13, LOW);
  delay(animationSpeed);
  
  digitalWrite(12, HIGH);
  delay(animationSpeed);
  digitalWrite(12, LOW);
  delay(animationSpeed);
  
  digitalWrite(11, HIGH);
  delay(animationSpeed);
  digitalWrite(11, LOW);
  delay(animationSpeed);
}
Q7) door locking system 

#include <Keypad.h>
#include <LiquidCrystal.h>
#include <Servo.h>

#define Password_Length 5

Servo myservo;
LiquidCrystal lcd(A0, A1, A2, A3, A4, A5);

int pos = 0;
char Data[Password_Length];
char Master[Password_Length] = "1234";
byte data_count = 0, master_count = 0;
bool Pass_is_good;
bool door = false;
char customKey;

/*---preparing keypad---*/
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {0, 1, 2, 3};
byte colPins[COLS] = {4, 5, 6, 7};
Keypad customKeypad = makeKeypad(keys, rowPins, colPins, ROWS, COLS);
void setup() {
  myservo.attach(9, 2000, 2400);
  ServoClose();
  lcd.begin(16, 2);
  lcd.print("Protected Door");
  loading("Loading");
  lcd.clear();
}

void loop() {
  if (door == true) {
    customKey = customKeypad.getKey();
    if (customKey == '#') {
      lcd.clear();
      ServoClose();
      lcd.print("Door is closed");
      delay(3000);
      door = false;
    }
  } else {
    Open();
void loading(char msg[]) {
  lcd.setCursor(0, 1);
  lcd.print(msg);
  for (int i = 0; i < 9; i++) {
    delay(1000);
    lcd.print(".");
  }
}

void clearData() {
  while (data_count != 0) {
    Data[data_count